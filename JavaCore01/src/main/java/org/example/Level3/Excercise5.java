package org.example.Level3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Excercise5 {
    // Write a program that takes a list of numbers as input and returns
    // the smallest positive integer that cannot be represented as the sum of any subset of the list.
    // V√≠ d·ª•: [1, 2, 3, 7, 8, 20] => 42
    // Gi·∫£i th√≠ch
    // Ch·∫°y v√≤ng l·∫∑p t·ª´ 1 ƒë·∫øn s·ªë d∆∞∆°ng v√¥ c√πng:
    // S·ªë 1 c√≥ trong m·∫£ng => lo·∫°i
    //‚Ä¶ T∆∞∆°ng t·ª± v·ªõi 2 v√† 3
    // S·ªë 4 kh√¥ng c√≥ trong m·∫£ng n√≥ l√† t·ªïng c·ªßa 1 v√† 3 üëâ lo·∫°i 4
    //‚Ä¶ T∆∞∆°ng t·ª± ƒë·∫øn 42 th√¨ kh√¥ng c√≥ t·∫≠p h·ª£p s·ªë n√†o trong m·∫£ng l√† 42=> 42 l√† k·∫øt qu·∫£
    public static void main(String[] args) {
        List<Integer> arrNum = new ArrayList<>(List.of(0, 1, 3, 4, 5));
        Collections.sort(arrNum);
        int smallest = 1;


        for (int number : arrNum) {
            if (number <= smallest) { // check n·∫øu num > small th√¨ break return small do l√† s·ªë b√© nh·∫•t c√≥ th·ªÉ t·∫°o ƒëc
                smallest += number;
            }
        }
        System.out.println(smallest);
    }

    public static int findPositiveNumNotEqualSumAnyNumInList(List<Integer> arrNum) {
        Collections.sort(arrNum);
        int smallest = 1;


        for (int number : arrNum) {
            if (number <= smallest) { // check n·∫øu num > small th√¨ break return small do l√† s·ªë b√© nh·∫•t c√≥ th·ªÉ t·∫°o ƒëc
                smallest += number;
            }
        }
        return smallest;
    }
}
