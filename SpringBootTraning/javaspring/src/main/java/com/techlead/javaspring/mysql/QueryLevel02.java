package com.techlead.javaspring.mysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("api/v1/mysql/lv02")
public class QueryLevel02 {
    @Autowired
    private JdbcTemplate jdbcTemplate;

    //1.Write a SQL query to return the top 10 customers who have generated the most revenue
    //for the store, including their names and total revenue generated.
    @GetMapping("/ex1")
    public ResponseEntity<?> ex1() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name, SUM(p.amount) AS total_revenue\n" +
                                "FROM customer c\n" +
                                "JOIN payment p ON c.customer_id = p.customer_id\n" +
                                "GROUP BY c.customer_id, customer_name\n" +
                                "ORDER BY total_revenue DESC\n" +
                                "LIMIT 10;"
                );
        return ResponseEntity.ok(rs);
    }



    //2.Write a SQL query to return the names and contact information of all customers
    //who have rented films in all categories in the database.
    //b1: Lấy ra ds các category mà customer đã thuê
    @GetMapping("/ex2")
    public ResponseEntity<?> ex2() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "SELECT c.customer_id AS `id`, CONCAT(c.first_name, ' ', c.last_name) AS `Name`, c.email,\n" +
                                "       CONCAT(a2.address, ', ', a2.district) AS `Address`\n" +
                                "FROM customer c\n" +
                                "LEFT JOIN address a2 ON a2.address_id = c.address_id\n" +
                                "WHERE c.customer_id IN (\n" +
                                "\tSELECT c.customer_id\n" +
                                "\tFROM inventory i\n" +
                                "\tJOIN rental r ON i.inventory_id = r.inventory_id\n" +
                                "\tJOIN customer c ON r.customer_id = c.customer_id\n" +
                                "\tJOIN film_category fc ON i.film_id = fc.film_id\n" +
                                "\tGROUP BY c.customer_id\n" +
                                "\tHAVING (COUNT(DISTINCT fc.category_id) = (SELECT COUNT(1) FROM category c))\n" +
                                ");"
                );
        return ResponseEntity.ok(rs);
    }

    //3. Write a SQL query to return the titles of all films in the database that have been rented
    //at least once but never returned.
    @GetMapping("/ex3")
    public ResponseEntity<?> ex3() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "SELECT f.title\n" +
                                "    FROM film f\n" +
                                "    INNER JOIN inventory i ON f.film_id = i.film_id\n" +
                                "    INNER JOIN rental r ON i.inventory_id = r.inventory_id\n" +
                                "    WHERE r.return_date IS NULL;"
                );
        return ResponseEntity.ok(rs);
    }


    //-- 4. Write a SQL query to return the names of all actors who have appeared in at least one film
    //-- in each category in the database.
    //-- b1: lấy ra ds actor có full cate
    @GetMapping("/ex4")
    public ResponseEntity<?> ex4() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "SELECT CONCAT(a.first_name, ' ', a.last_name)\n" +
                                "FROM actor a\n" +
                                "WHERE a.actor_id IN (\n" +
                                "\tSELECT fa.actor_id\n" +
                                "\tFROM film_actor fa\n" +
                                "\tINNER JOIN film_category fc ON fa.film_id = fc.film_id\n" +
                                "\tGROUP BY fa.actor_id\n" +
                                "\tHAVING COUNT(DISTINCT fc.category_id) = (SELECT COUNT(1) FROM category c)\n" +
                                ");"
                );
        return ResponseEntity.ok(rs);
    }

    @GetMapping("/ex5")
    public ResponseEntity<?> ex5() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        ""
                );
        return ResponseEntity.ok(rs);
    }

    //-- 6.Write a SQL query to return the total revenue generated by each actor in the database,
    //-- based on the rental fees of the films they have appeared in.
    @GetMapping("/ex6")
    public ResponseEntity<?> ex6() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "SELECT a.actor_id, SUM(p.amount) AS revenue\n" +
                                "    FROM actor a\n" +
                                "    INNER JOIN film_actor fa ON a.actor_id = fa.actor_id\n" +
                                "    INNER JOIN inventory i ON fa.film_id = i.film_id\n" +
                                "    INNER JOIN rental r ON i.inventory_id = r.inventory_id\n" +
                                "    INNER JOIN payment p ON r.rental_id = p.rental_id\n" +
                                "    GROUP BY a.actor_id;"
                );
        return ResponseEntity.ok(rs);
    }


    //-- 7.Write a SQL query to return the names of all actors who have appeared in at least one film
    //-- with a rating of 'R', but have never appeared in a film with a rating of 'G'.
    @GetMapping("/ex7")
    public ResponseEntity<?> ex7() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "SELECT a.actor_id\n" +
                                "FROM actor a\n" +
                                "INNER JOIN film_actor fa ON a.actor_id = fa.actor_id\n" +
                                "INNER JOIN film f ON fa.film_id = f.film_id\n" +
                                "WHERE f.rating = 'R' AND f.rating != 'G'\n" +
                                "GROUP BY a.actor_id;"
                );
        return ResponseEntity.ok(rs);
    }

    //-- 8.Write a SQL query to return the titles of all films in the database that have been rented by
    //-- more than 50 customers, but have never been rented by the same customer more than once.
    //-- b1: Lấy ds phim đc thuê chỉ 1 lần bởi mỗi khách hàng
    @GetMapping("/ex8")
    public ResponseEntity<?> ex8() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "SELECT f.title,COUNT(DISTINCT r.customer_id)\n" +
                                "FROM film f\n" +
                                "INNER JOIN inventory i ON f.film_id = i.film_id\n" +
                                "INNER JOIN rental r ON i.inventory_id = r.inventory_id\n" +
                                "GROUP BY f.film_id\n" +
                                "HAVING COUNT(DISTINCT r.customer_id) > 30;"
                );
        return ResponseEntity.ok(rs);
    }


    //-- 9.Write a SQL query to return the names of all customers who have rented a film from a category they have
    //-- never rented from before.
    @GetMapping("/ex9")
    public ResponseEntity<?> ex9() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "SELECT CONCAT(c.first_name,' ', c.last_name) AS full_name\n" +
                                "FROM customer c  JOIN rental r ON c.customer_id = r.customer_id\n" +
                                "JOIN inventory i ON i.inventory_id = r.inventory_id\n" +
                                "JOIN film f ON i.film_id = f.film_id\n" +
                                "WHERE f.film_id NOT IN (\n" +
                                "\tSELECT i2.film_id\n" +
                                "    FROM customer c2\n" +
                                "    JOIN rental r2 ON c2.customer_id = r2.customer_id\n" +
                                "    JOIN inventory i2 ON r2.inventory_id = i2.inventory_id\n" +
                                "    -- JOIN film f2 ON i2.film_id = f2.film_id\n" +
                                "    WHERE c2.customer_id = c.customer_id\n" +
                                ");"
                );
        return ResponseEntity.ok(rs);
    }

    //-- 10. Write a SQL query to return the titles of all films in the database that have been rented by
    //-- every customer who has ever rented a film from the 'Action' category.
    //-- b1: DS khách đã thuê các phim có cate = 'Action'
    @GetMapping("/ex10")
    public ResponseEntity<?> ex10() {
        List<Map<String, Object>> rs =
                jdbcTemplate.queryForList(
                        "WITH cte_film_id AS (\n" +
                                "\tSELECT c.customer_id, GROUP_CONCAT(f.film_id) AS 'list_film', GROUP_CONCAT(f.title)\n" +
                                "\tFROM customer c\n" +
                                "\tINNER JOIN rental r ON c.customer_id = r.customer_id\n" +
                                "\tINNER JOIN inventory i ON r.inventory_id = i.inventory_id\n" +
                                "\tINNER JOIN film_category fc ON i.film_id = fc.film_id\n" +
                                "\tINNER JOIN film f ON fc.film_id = f.film_id\n" +
                                "\tWHERE fc.category_id = (SELECT category.category_id FROM category WHERE NAME = 'Action')\n" +
                                "\tGROUP BY c.customer_id\n" +
                                ")\n" +
                                "SELECT f.film_id, f.title\n" +
                                "FROM film f\n" +
                                "INNER JOIN inventory i2 ON f.film_id = i2.film_id\n" +
                                "INNER JOIN rental r2 ON i2.inventory_id = r2.inventory_id\n" +
                                "WHERE r2.customer_id IN (SELECT cte_film_id.customer_id FROM cte_film_id)\n" +
                                "GROUP BY f.film_id, f.title;"
                );
        return ResponseEntity.ok(rs);
    }

}
